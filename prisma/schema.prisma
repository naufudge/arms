// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Record {
  id Int @id @default(autoincrement())
  title String
  subject String?
  description String
  creator String
  publisher String?
  contributor String?
  date DateTime
  type String
  format String?
  identifier String?
  source String?
  language String?
  relation String?
  coverage String?
  rights String
  createdOn DateTime @default(now())
  files File[]
  userId String
  user User @relation(fields: [userId], references: [id])
  collectionId Int
  collection Collection @relation(fields: [collectionId], references: [id])
  deleteReq DeleteRequest? @relation(fields: [deleteReqId], references: [id])
  deleteReqId Int? @unique
}

model User {
  id String @id @default(uuid())
  username String @unique
  password String
  email String
  disabled Boolean @default(false)
  passChange Boolean @default(true)
  records Record[]
  collections Collection[]
  deleteReqs DeleteRequest[] @relation(name: "RequestUser")
  approvedDeleteReqs DeleteRequest[] @relation(name: "ApproveUser")
  userRoleId Int
  userRole UserRole @relation(fields: [userRoleId], references: [id])
}

model Collection {
  id Int @id @default(autoincrement())
  name String
  description String?
  createdOn DateTime @default(now())
  userId String
  user User @relation(fields: [userId], references: [id])
  records Record[]
}

model UserRole {
  id Int @id @default(autoincrement())
  name String
  users User[]
}

model File {
  id String @id
  name String
  type String
  size Int
  recordId Int
  record Record @relation(fields: [recordId], references: [id])
}

model DeleteRequest {
  id Int @id @default(autoincrement())
  reason String
  approved Boolean @default(false)
  createdOn DateTime @default(now())
  record Record? @relation
  reqUser User @relation(name: "RequestUser", fields: [reqUserId], references: [id])
  reqUserId String
  approveUser User? @relation(name: "ApproveUser", fields: [approveUserId], references: [id])
  approveUserId String?
}